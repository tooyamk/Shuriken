execute_process(COMMAND git -C ${SRC_DIR} clean -xfd)
execute_process(COMMAND git -C ${SRC_DIR} reset --hard)

execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PATCH_DIR}/GetHostTriple.cmake ${SRC_DIR}/cmake/modules)
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PATCH_DIR}/CrossCompile.cmake ${SRC_DIR}/cmake/modules)
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PATCH_DIR}/TableGen.cmake ${SRC_DIR}/cmake/modules)

set(file ${SRC_DIR}/CMakeLists.txt)
file(READ ${file} content)
string(REGEX REPLACE "add_subdirectory\\(cmake/modules\\).+include\\(CoverageReport\\)" "add_subdirectory(cmake/modules)\r\ninstall(DIRECTORY include/dxc DESTINATION include FILES_MATCHING PATTERN \"*.h\")\r\ninclude(CoverageReport)" content "${content}")
file(WRITE ${file} "${content}")

set(file ${SRC_DIR}/cmake/modules/AddLLVM.cmake)
file(READ ${file} content)
string(REGEX REPLACE "set_target_properties\\(\\$\\{name}[^\r\n]*[\r\n]+[^\r\n]*PROPERTIES[^\r\n]*[\r\n]+[^\r\n]*SOVERSION[^\r\n]+[\r\n]+[^\r\n]*VERSION \\$\\{LLVM_VERSION_MAJOR}\\.\\$\\{LLVM_VERSION_MINOR}\\.\\$\\{LLVM_VERSION_PATCH}\\$\\{LLVM_VERSION_SUFFIX}\\)" "" content "${content}")
file(WRITE ${file} "${content}")

set(file ${SRC_DIR}/tools/clang/tools/dxcompiler/CMakeLists.txt)
file(READ ${file} content)
string(REPLACE "VERSION \${LIBCLANG_LIBRARY_VERSION}" "" content "${content}")
file(WRITE ${file} "${content}")

set(file ${SRC_DIR}/lib/DxcSupport/WinFunctions.cpp)
file(READ ${file} content)
string(REPLACE "unsigned char _BitScanForward" "#ifndef __ANDROID__\r\nunsigned char _BitScanForward" content "${content}")
string(REPLACE "struct CoMalloc" "#endif\r\nstruct CoMalloc" content "${content}")
file(WRITE ${file} "#include <ios>\n${content}")

set(file ${SRC_DIR}/utils/hct/hctgen.py)
file(READ ${file} content)
string(REPLACE "def openOutput(args):" "def openOutput(args):\r\n  dir = os.path.dirname(args.output)\r\n  if not os.path.exists(dir):\r\n    os.makedirs(dir)" content "${content}")
file(WRITE ${file} "${content}")

set(file ${SRC_DIR}/tools/CMakeLists.txt)
file(READ ${file} content)
string(REPLACE "add_llvm_tool_subdirectory(llvm-config)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(opt)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-as)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-dis)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(dxexp)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-link)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-extract)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-diff)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-bcanalyzer)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-stress)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(verify-uselistorder)" "" content "${content}")
#string(REPLACE "add_llvm_external_project(clang)" "" content "${content}")
file(WRITE ${file} "${content}")

#set(file ${SRC_DIR}/tools/clang/include/CMakeLists.txt)
#file(READ ${file} content)
#string(REPLACE "add_subdirectory(clang)" "" content "${content}")
#file(WRITE ${file} "${content}")

set(file ${SRC_DIR}/tools/clang/tools/CMakeLists.txt)
file(READ ${file} content)
string(REPLACE "add_subdirectory(dxc)" "" content "${content}")
string(REPLACE "add_subdirectory(d3dcomp)" "" content "${content}")
string(REPLACE "add_subdirectory(dxrfallbackcompiler)" "" content "${content}")
string(REPLACE "add_subdirectory(dxa)" "" content "${content}")
string(REPLACE "add_subdirectory(dxopt)" "" content "${content}")
string(REPLACE "add_subdirectory(dxl)" "" content "${content}")
string(REPLACE "add_subdirectory(dxr)" "" content "${content}")
string(REPLACE "add_subdirectory(dxv)" "" content "${content}")
string(REPLACE "add_subdirectory(dxlib-sample)" "" content "${content}")
string(REPLACE "add_subdirectory(dotnetc)" "" content "${content}")
file(WRITE ${file} "${content}")