execute_process(COMMAND git -C ${GIT_ROOT} clean -xfd)
execute_process(COMMAND git -C ${GIT_ROOT} reset --hard)

execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SRC_DIR}/patch/GetHostTriple.cmake ${BIN_DIR}/src/cmake/modules)
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SRC_DIR}/patch/CrossCompile.cmake ${BIN_DIR}/src/cmake/modules)
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SRC_DIR}/patch/TableGen.cmake ${BIN_DIR}/src/cmake/modules)

set(file ${BIN_DIR}/src/lib/DxilRootSignature/DxilRootSignatureValidator.cpp)
file(READ ${file} content)
file(WRITE ${file} "#include <ios>\n${content}")

set(file ${BIN_DIR}/src/external/SPIRV-Tools/source/val/validate.cpp)
file(READ ${file} content)
string(REPLACE "for (const auto " "for (const auto& " content "${content}")
file(WRITE ${file} "${content}")

set(file ${BIN_DIR}/src/external/SPIRV-Tools/source/val/validation_state.cpp)
file(READ ${file} content)
string(REPLACE "for (const Function " "for (const Function& " content "${content}")
file(WRITE ${file} "${content}")

set(file ${BIN_DIR}/src/utils/hct/hctgen.py)
file(READ ${file} content)
if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    string(REPLACE "def openOutput(args):" "def openOutput(args):\r\n  dir = os.path.dirname(args.output)\r\n  if not os.path.exists(dir):\r\n    os.makedirs(dir)" content "${content}")
else ()
    string(REPLACE "def openOutput(args):" "def openOutput(args):\r  dir = os.path.dirname(args.output)\r  if not os.path.exists(dir):\r    os.makedirs(dir)" content "${content}")
endif ()
file(WRITE ${file} "${content}")

set(file ${BIN_DIR}/src/tools/CMakeLists.txt)
file(READ ${file} content)
string(REPLACE "add_llvm_tool_subdirectory(llvm-config)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(opt)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-as)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-dis)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(dxexp)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-link)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-extract)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-diff)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-bcanalyzer)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(llvm-stress)" "" content "${content}")
string(REPLACE "add_llvm_tool_subdirectory(verify-uselistorder)" "" content "${content}")
#string(REPLACE "add_llvm_external_project(clang)" "" content "${content}")
file(WRITE ${file} "${content}")

#set(file ${BIN_DIR}/src/tools/clang/include/CMakeLists.txt)
#file(READ ${file} content)
#string(REPLACE "add_subdirectory(clang)" "" content "${content}")
#file(WRITE ${file} "${content}")

set(file ${BIN_DIR}/src/tools/clang/tools/CMakeLists.txt)
file(READ ${file} content)
string(REPLACE "add_subdirectory(dxc)" "" content "${content}")
string(REPLACE "add_subdirectory(d3dcomp)" "" content "${content}")
string(REPLACE "add_subdirectory(dxrfallbackcompiler)" "" content "${content}")
string(REPLACE "add_subdirectory(dxa)" "" content "${content}")
string(REPLACE "add_subdirectory(dxopt)" "" content "${content}")
string(REPLACE "add_subdirectory(dxl)" "" content "${content}")
string(REPLACE "add_subdirectory(dxr)" "" content "${content}")
string(REPLACE "add_subdirectory(dxv)" "" content "${content}")
string(REPLACE "add_subdirectory(dxlib-sample)" "" content "${content}")
string(REPLACE "add_subdirectory(dotnetc)" "" content "${content}")
file(WRITE ${file} "${content}")