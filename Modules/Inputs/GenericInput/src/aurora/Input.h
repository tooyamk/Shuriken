#pragma once

#include "Base.h"
#include "aurora/events/EventDispatcher.h"
#include <unordered_map>
#include <string_view>

#ifndef AE_GENERIC_INPUT_ENUM
#	define AE_GENERIC_INPUT_ENUM

#	define AE_GENERIC_INPUT_ENUM_HIDReportItemType \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MAIN, 0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(GLOBAL, 1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(LOCAL, 2) \

#	define AE_GENERIC_INPUT_ENUM_HIDReportMainItemTag \
			AE_GENERIC_INPUT_ENUM_ELEMENT(INPUT, 0x8) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(OUTPUT, 0x9) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(COLLECTION, 0xA) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(FEATURE, 0xB) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(END_COLLECTION, 0xC) \

#	define AE_GENERIC_INPUT_ENUM_HIDReportGlobalItemTag \
			AE_GENERIC_INPUT_ENUM_ELEMENT(USAGE_PAGE, 0x0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(LOGICAL_MINIMUM, 0x1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(LOGICAL_MAXIMUM, 0x2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(PHYSICAL_MINIMUM, 0x3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(PHYSICAL_MAXIMUM, 0x4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(UNIT_EXPONENT, 0x5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(UNIT, 0x6) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(REPORT_SIZE, 0x7) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(REPORT_ID, 0x8) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(REPORT_COUNT, 0x9) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(PUSH, 0xA) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(POP, 0xB) \

#	define AE_GENERIC_INPUT_ENUM_HIDReportUsagePageType \
			AE_GENERIC_INPUT_ENUM_ELEMENT(UNDEFINED, 0x0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(GENERIC_DESKTOP, 0x1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SIMULATION_CONTROLS, 0x2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(VR_CONTROLS, 0x3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SPORT_CONTROLS, 0x4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(GAME_CONTROLS, 0x5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(GENERIC_DEVICE_CONTROLS, 0x6) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(KEYBOARD_OR_KEYPAD, 0x7) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(LEDS, 0x8) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(BUTTON, 0x9) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(ORDINALS, 0xA) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(TELEPHONY_DEVICES, 0xB) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(CONSUMER_DEVICES, 0xC) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DIGITIZERS, 0xD) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(HAPTICS, 0xE) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(PID, 0xF) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(UNICODE, 0x10) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(EYE_AND_HEAD_TRACKERS, 0x12) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(AUXILIARY_DISPLAY, 0x14) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SENSORS, 0x20) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MEDIA_INSTRUMENT, 0x40) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(BRAILLE_DISPLAY, 0x41) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(LIGHTING_AND_ILLUMINATION, 0x59) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MONITOR, 0x80) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MONITOR_ENUMERATED_VALUES, 0x81) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(VESA_VIRTUAL_CONTROLS, 0x82) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(VESA_COMMAND, 0x83) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(POWER_DEVICE, 0x84) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(BATTERY_SYSTEM, 0x85) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(POWER_PAGES_BEGIN, 0x86) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(POWER_PAGES_END, 0x87) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(BAR_CODE_SCANNER, 0x8C) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SCALE, 0x8D) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MAGNETIC_STRIPE_REDING_DEVICES, 0x8E) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(RESERVED_POINT_OF_SALE, 0x8F) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(CAMERA_CONTROL, 0x90) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(ARCADE, 0x91) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(GAMING_DEVICE, 0x92) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(FIDO_ALLIANCE, 0xF1D0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(VENDOR_DEFINED_BEGIN, 0xFF00) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(VENDOR_DEFINED_END, 0xFFFF) \

#	define AE_GENERIC_INPUT_ENUM_HIDReportGenericDesktopPageType \
			AE_GENERIC_INPUT_ENUM_ELEMENT(UNDEFINED, 0x0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(POINTER, 0x1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MOUSE, 0x2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(JOYSTICK, 0x4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(GAMEPAD, 0x5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(KEYBOARD, 0x6) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(KEYPAD, 0x7) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MULTI_AXIS_CONTROLLER, 0x8) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(TABLET_PC_SYSTEM_CONTROLS, 0x9) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(WATER_COOLING_DEVICE, 0xA) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(COMPUTER_CHASSIS_DEVICE, 0xB) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(WIRELESS_RADIO_CONTROLS, 0xC) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(PORTABLE_DEVICE_CONTROLS, 0xD) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MULTI_AXIS_CONTROLLER, 0xE) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SPATIAL_CONTROLLER, 0xF) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(ASSISTIVE_CONTROL, 0x10) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DEVICE_DOCK, 0x11) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DOCKABLE_DEVICE, 0x12) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(X, 0x30) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(Y, 0x31) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(Z, 0x32) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(R_X, 0x33) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(R_Y, 0x34) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(R_Z, 0x35) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SLIDER, 0x36) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DIAL, 0x37) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(WHEEL, 0x38) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(HAT_SWITCH, 0x39) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(COUNTED_BUFFER, 0x3A) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(BYTE_COUNT, 0x3B) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MOTION_WAKEUP, 0x3C) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(START, 0x3D) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SELECT, 0x3E) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(V_X, 0x40) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(V_Y, 0x41) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(V_Z, 0x42) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(V_BRX, 0x43) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(V_BRY, 0x44) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(V_BRZ, 0x45) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(V_NO, 0x46) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(FEATURE_NOTIFICATION, 0x47) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(RESOLUTION_MULTIPLIER, 0x48) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(Q_X, 0x49) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(Q_Y, 0x4A) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(Q_Z, 0x4B) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(Q_W, 0x4C) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_CONTROL, 0x80) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_POWER_DOWN, 0x81) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_SLEEP, 0x82) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_WAKEUP, 0x83) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_CONTEXT_MENU, 0x84) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MAIN_MENU, 0x85) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_APP_MENU, 0x86) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MENU_HELP, 0x87) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MENU_EXIT, 0x88) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MENU_SELECT, 0x89) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MENU_RIGHT, 0x8A) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MENU_LEFT, 0x8B) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MENU_UP, 0x8C) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_MENU_DOWN, 0x8D) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_COLD_RESTART, 0x8E) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_WARM_RESTART, 0x8F) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(D_PAD_UP, 0x90) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(D_PAD_DOWN, 0x91) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(D_PAD_RIGHT, 0x92) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(D_PAD_LEFT, 0x93) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(INDEX_TRIGGER, 0x94) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(PALM_TRIGGER, 0x95) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(THUMBSTICK, 0x96) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_FUNCTION_SHIFT, 0x97) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_FUNCTION_SHIFT_LOCK, 0x98) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_FUNCTION_SHIFT_LOCK_INDICATOR, 0x99) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISMISS_NOTIFICATION, 0x9A) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DO_NOT_DISTURB, 0x9B) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DOCK, 0xA0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_UNDOCK, 0xA1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_SETUP, 0xA2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_BREAK, 0xA3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DEBUGGER_BREAK, 0xA4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(APPLICATION_BREAK, 0xA5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(APPLICATION_DEBUGGER_BREAK, 0xA6) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_SPEATER_MUTE, 0xA7) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_HIBERNATE, 0xA8) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_INVERT, 0xB0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_INTERNAL, 0xB1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_EXTERNAL, 0xB2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_BOTH, 0xB3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_DUAL, 0xB4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_TOGGLE_INT_OR_EXT_MODE, 0xB5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_SWAP_PRIMARY_OR_SECONDARY, 0xB6) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_TOGGLE_LCD_AUTOSCALE, 0xB7) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SENSOR_ZONE, 0xC0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(RPM, 0xC1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(COOLANT_LEVEL, 0xC2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(COOLANT_CRITICAL_LEVEL, 0xC3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(COOLANT_PUMP, 0xC4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(CHASSIS_ENCLOSURE, 0xC5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(WIRELESS_RADIO_BUTTON, 0xC6) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(WIRELESS_RADIO_LED, 0xC7) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(WIRELESS_RADIO_SLIDER_SWITCH, 0xC8) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_ROTATION_LOCK_BUTTON, 0xC9) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(SYSTEM_DISPLAY_ROTATION_LOCK_SLIDER_SWITCH, 0xCA) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(CONTROL_ENABLE, 0xCB) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DOCKABLE_DEVICE_UNIQUE_ID, 0xD0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DOCKABLE_DEVICE_VENDOR_ID, 0xD1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DOCKABLE_DEVICE_PRIMARY_USAGE_PAGE, 0xD2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DOCKABLE_DEVICE_PRIMARY_USAGE_ID, 0xD3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DOCKABLE_DEVICE_DOCKING_STATE, 0xD4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DOCKABLE_DEVICE_DISPLAY_OCCLUSION, 0xD5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DOCKABLE_DEVICE_OBJECT_TYPE, 0xD6) \

#	define AE_GENERIC_INPUT_ENUM_HIDReportConsumerPageType \
			AE_GENERIC_INPUT_ENUM_ELEMENT(UNDEFINED, 0x0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(CONSUMER_CONTROL, 0x1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(NUMERIC_KEY_PAD, 0x2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(PROGRAMMABLE_BUTTONS, 0x3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(MICROPHONE, 0x4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(HEADPHONE, 0x5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(GRAPHIC_EQUALIZER, 0x6) \

#	define AE_GENERIC_INPUT_ENUM_HIDReportLocalItemTag \
			AE_GENERIC_INPUT_ENUM_ELEMENT(USAGE, 0x0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(USAGE_MINIMUM, 0x1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(USAGE_MAXIMUM, 0x2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DESIGNATOR_INDEX, 0x3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DESIGNATOR_MINIMUM, 0x4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DESIGNATOR_MAXIMUM, 0x5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(STRING_INDEX, 0x6) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(STRING_MINIMUM, 0x7) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(STRING_MAXIMUM, 0x8) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(DELIMITER, 0xA) \

#	define AE_GENERIC_INPUT_ENUM_HIDReportCollectionData \
			AE_GENERIC_INPUT_ENUM_ELEMENT(PHYSICAL, 0x0) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(APPLICATION, 0x1) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(LOGICAL, 0x2) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(REPORT, 0x3) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(NAMED_ARRAY, 0x4) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(USAGE_MODIFIER, 0x5) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(USAGE_SWITCH, 0x6) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(VENDOR_DEFINED_BEGIN, 0x80) \
			AE_GENERIC_INPUT_ENUM_ELEMENT(VENDOR_DEFINED_END, 0xFF) \

#endif

namespace aurora::modules::inputs::generic_input {
	using namespace std::literals;

	class AE_MODULE_DLL Input : public IInputModule {
	public:
		Input(Ref* loader);
		virtual ~Input();

		void operator delete(Input* p, std::destroying_delete_t) {
			auto l = p->_loader;
			p->~Input();
			::operator delete(p);
		}

		virtual events::IEventDispatcher<ModuleEvent>& AE_CALL getEventDispatcher() override;
		virtual void AE_CALL poll() override;
		virtual IInputDevice* AE_CALL createDevice(const DeviceGUID& guid) override;

	private:
		enum class HIDReportItemType : uint8_t {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) a = b,
			AE_GENERIC_INPUT_ENUM_HIDReportItemType
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			__end
		};

		inline static const std::unordered_map<HIDReportItemType, std::string_view> HID_REPORT_ITEM_TYPE_MAP = {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) { HIDReportItemType::a, #a##sv },
			AE_GENERIC_INPUT_ENUM_HIDReportItemType
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			{ (HIDReportItemType)(std::numeric_limits<std::underlying_type_t<HIDReportItemType>>::max)(), "__end"sv }
		};

		enum class HIDReportMainItemTag : uint8_t {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) a = b,
			AE_GENERIC_INPUT_ENUM_HIDReportMainItemTag
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			__end
		};

		inline static const std::unordered_map<HIDReportMainItemTag, std::string_view> HID_REPORT_MAIN_ITEM_TAG_MAP = {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) { HIDReportMainItemTag::a, #a##sv },
			AE_GENERIC_INPUT_ENUM_HIDReportMainItemTag
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			{ (HIDReportMainItemTag)(std::numeric_limits<std::underlying_type_t<HIDReportMainItemTag>>::max)(), "__end"sv }
		};

		enum class HIDReportGlobalItemTag : uint8_t {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) a = b,
			AE_GENERIC_INPUT_ENUM_HIDReportGlobalItemTag
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			__end
		};

		inline static const std::unordered_map<HIDReportGlobalItemTag, std::string_view> HID_REPORT_GLOBAL_ITEM_TAG_MAP = {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) { HIDReportGlobalItemTag::a, #a##sv },
			AE_GENERIC_INPUT_ENUM_HIDReportGlobalItemTag
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			{ (HIDReportGlobalItemTag)(std::numeric_limits<std::underlying_type_t<HIDReportGlobalItemTag>>::max)(), "__end"sv }
		};

		enum class HIDReportUsagePageType : uint32_t {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) a = b,
			AE_GENERIC_INPUT_ENUM_HIDReportUsagePageType
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			__end
		};

		inline static const std::unordered_map<HIDReportUsagePageType, std::string_view> HID_REPORT_USAGE_PAGE_TYPE_MAP = {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) { HIDReportUsagePageType::a, #a##sv },
			AE_GENERIC_INPUT_ENUM_HIDReportUsagePageType
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			{ (HIDReportUsagePageType)(std::numeric_limits<std::underlying_type_t<HIDReportUsagePageType>>::max)(), "__end"sv }
		};

		enum class HIDReportGenericDesktopPageType : uint32_t {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) a = b,
			AE_GENERIC_INPUT_ENUM_HIDReportGenericDesktopPageType
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			__end
		};

		inline static const std::unordered_map<HIDReportGenericDesktopPageType, std::string_view> HID_REPORT_GENERIC_DISKTOP_PAGE_TYPE_MAP = {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) { HIDReportGenericDesktopPageType::a, #a##sv },
			AE_GENERIC_INPUT_ENUM_HIDReportGenericDesktopPageType
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			{ (HIDReportGenericDesktopPageType)(std::numeric_limits<std::underlying_type_t<HIDReportGenericDesktopPageType>>::max)(), "__end"sv }
		};

		enum class HIDReportConsumerPageType : uint32_t {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) a = b,
			AE_GENERIC_INPUT_ENUM_HIDReportConsumerPageType
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			__end
		};

		inline static const std::unordered_map<HIDReportConsumerPageType, std::string_view> HID_REPORT_CONSUMER_PAGE_TYPE_MAP = {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) { HIDReportConsumerPageType::a, #a##sv },
			AE_GENERIC_INPUT_ENUM_HIDReportConsumerPageType
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			{ (HIDReportConsumerPageType)(std::numeric_limits<std::underlying_type_t<HIDReportConsumerPageType>>::max)(), "__end"sv }
		};

		enum class HIDReportLocalItemTag : uint8_t {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) a = b,
			AE_GENERIC_INPUT_ENUM_HIDReportLocalItemTag
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			__end
		};

		inline static const std::unordered_map<HIDReportLocalItemTag, std::string_view> HID_REPORT_LOCAL_ITEM_TAG_MAP = {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) { HIDReportLocalItemTag::a, #a##sv },
			AE_GENERIC_INPUT_ENUM_HIDReportLocalItemTag
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			{ (HIDReportLocalItemTag)(std::numeric_limits<std::underlying_type_t<HIDReportLocalItemTag>>::max)(), "__end"sv }
		};

		enum class HIDReportCollectionData : uint16_t {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) a = b,
			AE_GENERIC_INPUT_ENUM_HIDReportCollectionData
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			__end
		};

		inline static const std::unordered_map<HIDReportCollectionData, std::string_view> HID_REPORT_COLLECTION_DATA_MAP = {
#define AE_GENERIC_INPUT_ENUM_ELEMENT(a, b) { HIDReportCollectionData::a, #a##sv },
			AE_GENERIC_INPUT_ENUM_HIDReportCollectionData
#undef AE_GENERIC_INPUT_ENUM_ELEMENT
			{ (HIDReportCollectionData)(std::numeric_limits<std::underlying_type_t<HIDReportCollectionData>>::max)(), "__end"sv }
		};

		struct HIDDescriptor {
			struct Desc {
				uint8_t  bType;
				uint16_t wLength;
			};

			uint8_t bLength;
			uint8_t bDescriptorType;
			uint16_t bcdHID;
			uint8_t bCountry;
			uint8_t bNumDescriptors;
			Desc Descriptors[2];

			void AE_CALL set(const void* data, size_t size) {
				ByteArray ba((void*)data, size, ByteArray::Usage::SHARED);
				bLength = ba.read<decltype(bLength)>();
				bDescriptorType = ba.read<decltype(bDescriptorType)>();
				bcdHID = ba.read<decltype(bcdHID)>();
				bCountry = ba.read<decltype(bCountry)>();
				bNumDescriptors = ba.read<decltype(bNumDescriptors)>();
				for (size_t i = 0; i < 2; ++i) {
					auto& desc = Descriptors[i];
					desc.bType = ba.read<decltype(desc.bType)>();
					desc.wLength = ba.read<decltype(desc.wLength)>();
				}
			}
		};


		struct InternalDeviceInfo {
			int32_t readInterfaceIdx = -1, readEndpointIdx = -1, writeInterfaceIdx = -1, writeEndpointIdx = -1;
			DeviceType bestType = DeviceType::UNKNOWN;
			size_t score = 0;
		};


		IntrusivePtr<Ref> _loader;

		events::EventDispatcher<ModuleEvent> _eventDispatcher;

		std::vector<DeviceInfo> _devices;
		std::vector<DeviceInfo> _newDevices;
		std::vector<uint32_t> _keepDevices;

		libusb_context* _context;

		void AE_CALL _calcGUID(libusb_device* device, const libusb_device_descriptor& desc, DeviceGUID& guid);
		void AE_CALL _findDevices();
		void AE_CALL _checkDevice(libusb_device* device);
		void AE_CALL _checkConfiguration(libusb_device_handle* handle, const libusb_config_descriptor& desc, size_t index, const std::string_view& indent);
		void AE_CALL _checkInterface(libusb_device_handle* handle, const libusb_interface_descriptor& desc, size_t index, const std::string_view& indent);
		void AE_CALL _checkEndpoint(libusb_device_handle* handle, const libusb_endpoint_descriptor& desc, size_t index, const std::string_view& indent);
		void AE_CALL _checkHID(libusb_device_handle* handle, const HIDDescriptor& desc, const libusb_interface_descriptor& interface, const std::string_view& indent);
		void AE_CALL _checkHIDReport(const void* data, size_t size, const std::string_view& indent);
	};
}