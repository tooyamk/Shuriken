#pragma once

#include <optional>
#include "srk/ByteArray.h"

#ifndef SRK_EXTENSION_HID_ENUM
#	define SRK_EXTENSION_HID_ENUM

#	define SRK_EXTENSION_HID_ENUM_HIDReportItemType \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MAIN, 0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(GLOBAL, 1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(LOCAL, 2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RESERVED, 3) \

#	define SRK_EXTENSION_HID_ENUM_HIDReportMainItemTag \
			SRK_EXTENSION_HID_ENUM_ELEMENT(INPUT, 0x8) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(OUTPUT, 0x9) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(COLLECTION, 0xA) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(FEATURE, 0xB) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(END_COLLECTION, 0xC) \

#	define SRK_EXTENSION_HID_ENUM_HIDReportGlobalItemTag \
			SRK_EXTENSION_HID_ENUM_ELEMENT(USAGE_PAGE, 0x0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(LOGICAL_MINIMUM, 0x1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(LOGICAL_MAXIMUM, 0x2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(PHYSICAL_MINIMUM, 0x3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(PHYSICAL_MAXIMUM, 0x4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(UNIT_EXPONENT, 0x5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(UNIT, 0x6) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(REPORT_SIZE, 0x7) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(REPORT_ID, 0x8) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(REPORT_COUNT, 0x9) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(PUSH, 0xA) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(POP, 0xB) \

#	define SRK_EXTENSION_HID_ENUM_HIDReportLocalItemTag \
			SRK_EXTENSION_HID_ENUM_ELEMENT(USAGE, 0x0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(USAGE_MINIMUM, 0x1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(USAGE_MAXIMUM, 0x2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DESIGNATOR_INDEX, 0x3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DESIGNATOR_MINIMUM, 0x4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DESIGNATOR_MAXIMUM, 0x5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(STRING_INDEX, 0x6) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(STRING_MINIMUM, 0x7) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(STRING_MAXIMUM, 0x8) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DELIMITER, 0xA) \

#	define SRK_EXTENSION_HID_ENUM_HIDReportUsagePageType \
			SRK_EXTENSION_HID_ENUM_ELEMENT(UNDEFINED, 0x0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(GENERIC_DESKTOP, 0x1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SIMULATION_CONTROLS, 0x2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(VR_CONTROLS, 0x3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SPORT_CONTROLS, 0x4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(GAME_CONTROLS, 0x5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(GENERIC_DEVICE_CONTROLS, 0x6) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(KEYBOARD_OR_KEYPAD, 0x7) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(LEDS, 0x8) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(BUTTON, 0x9) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(ORDINALS, 0xA) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(TELEPHONY_DEVICES, 0xB) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(CONSUMER_DEVICES, 0xC) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DIGITIZERS, 0xD) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(HAPTICS, 0xE) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(PID, 0xF) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(UNICODE, 0x10) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(EYE_AND_HEAD_TRACKERS, 0x12) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(AUXILIARY_DISPLAY, 0x14) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SENSORS, 0x20) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MEDIA_INSTRUMENT, 0x40) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(BRAILLE_DISPLAY, 0x41) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(LIGHTING_AND_ILLUMINATION, 0x59) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MONITOR, 0x80) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MONITOR_ENUMERATED_VALUES, 0x81) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(VESA_VIRTUAL_CONTROLS, 0x82) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(VESA_COMMAND, 0x83) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(POWER_DEVICE, 0x84) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(BATTERY_SYSTEM, 0x85) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(POWER_PAGES_BEGIN, 0x86) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(POWER_PAGES_END, 0x87) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(BAR_CODE_SCANNER, 0x8C) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SCALE, 0x8D) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MAGNETIC_STRIPE_REDING_DEVICES, 0x8E) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RESERVED_POINT_OF_SALE, 0x8F) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(CAMERA_CONTROL, 0x90) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(ARCADE, 0x91) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(GAMING_DEVICE, 0x92) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(FIDO_ALLIANCE, 0xF1D0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(VENDOR_DEFINED_BEGIN, 0xFF00) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(VENDOR_DEFINED_END, 0xFFFF) \

#	define SRK_EXTENSION_HID_ENUM_HIDReportGenericDesktopPageType \
			SRK_EXTENSION_HID_ENUM_ELEMENT(UNDEFINED, 0x0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(POINTER, 0x1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MOUSE, 0x2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(JOYSTICK, 0x4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(GAMEPAD, 0x5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(KEYBOARD, 0x6) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(KEYPAD, 0x7) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MULTI_AXIS_CONTROLLER, 0x8) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(TABLET_PC_SYSTEM_CONTROLS, 0x9) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(WATER_COOLING_DEVICE, 0xA) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(COMPUTER_CHASSIS_DEVICE, 0xB) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(WIRELESS_RADIO_CONTROLS, 0xC) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(PORTABLE_DEVICE_CONTROLS, 0xD) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MULTI_AXIS_CONTROLLER, 0xE) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SPATIAL_CONTROLLER, 0xF) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(ASSISTIVE_CONTROL, 0x10) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DEVICE_DOCK, 0x11) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DOCKABLE_DEVICE, 0x12) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(X, 0x30) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(Y, 0x31) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(Z, 0x32) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RX, 0x33) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RY, 0x34) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RZ, 0x35) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SLIDER, 0x36) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DIAL, 0x37) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(WHEEL, 0x38) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(HAT_SWITCH, 0x39) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(COUNTED_BUFFER, 0x3A) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(BYTE_COUNT, 0x3B) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MOTION_WAKEUP, 0x3C) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(START, 0x3D) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SELECT, 0x3E) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(V_X, 0x40) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(V_Y, 0x41) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(V_Z, 0x42) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(V_BRX, 0x43) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(V_BRY, 0x44) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(V_BRZ, 0x45) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(V_NO, 0x46) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(FEATURE_NOTIFICATION, 0x47) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RESOLUTION_MULTIPLIER, 0x48) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(Q_X, 0x49) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(Q_Y, 0x4A) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(Q_Z, 0x4B) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(Q_W, 0x4C) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_CONTROL, 0x80) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_POWER_DOWN, 0x81) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_SLEEP, 0x82) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_WAKEUP, 0x83) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_CONTEXT_MENU, 0x84) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MAIN_MENU, 0x85) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_APP_MENU, 0x86) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MENU_HELP, 0x87) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MENU_EXIT, 0x88) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MENU_SELECT, 0x89) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MENU_RIGHT, 0x8A) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MENU_LEFT, 0x8B) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MENU_UP, 0x8C) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_MENU_DOWN, 0x8D) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_COLD_RESTART, 0x8E) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_WARM_RESTART, 0x8F) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(D_PAD_UP, 0x90) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(D_PAD_DOWN, 0x91) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(D_PAD_RIGHT, 0x92) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(D_PAD_LEFT, 0x93) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(INDEX_TRIGGER, 0x94) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(PALM_TRIGGER, 0x95) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(THUMBSTICK, 0x96) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_FUNCTION_SHIFT, 0x97) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_FUNCTION_SHIFT_LOCK, 0x98) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_FUNCTION_SHIFT_LOCK_INDICATOR, 0x99) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISMISS_NOTIFICATION, 0x9A) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DO_NOT_DISTURB, 0x9B) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DOCK, 0xA0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_UNDOCK, 0xA1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_SETUP, 0xA2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_BREAK, 0xA3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DEBUGGER_BREAK, 0xA4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(APPLICATION_BREAK, 0xA5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(APPLICATION_DEBUGGER_BREAK, 0xA6) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_SPEATER_MUTE, 0xA7) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_HIBERNATE, 0xA8) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_INVERT, 0xB0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_INTERNAL, 0xB1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_EXTERNAL, 0xB2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_BOTH, 0xB3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_DUAL, 0xB4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_TOGGLE_INT_OR_EXT_MODE, 0xB5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_SWAP_PRIMARY_OR_SECONDARY, 0xB6) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_TOGGLE_LCD_AUTOSCALE, 0xB7) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SENSOR_ZONE, 0xC0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RPM, 0xC1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(COOLANT_LEVEL, 0xC2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(COOLANT_CRITICAL_LEVEL, 0xC3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(COOLANT_PUMP, 0xC4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(CHASSIS_ENCLOSURE, 0xC5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(WIRELESS_RADIO_BUTTON, 0xC6) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(WIRELESS_RADIO_LED, 0xC7) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(WIRELESS_RADIO_SLIDER_SWITCH, 0xC8) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_ROTATION_LOCK_BUTTON, 0xC9) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(SYSTEM_DISPLAY_ROTATION_LOCK_SLIDER_SWITCH, 0xCA) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(CONTROL_ENABLE, 0xCB) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DOCKABLE_DEVICE_UNIQUE_ID, 0xD0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DOCKABLE_DEVICE_VENDOR_ID, 0xD1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DOCKABLE_DEVICE_PRIMARY_USAGE_PAGE, 0xD2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DOCKABLE_DEVICE_PRIMARY_USAGE_ID, 0xD3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DOCKABLE_DEVICE_DOCKING_STATE, 0xD4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DOCKABLE_DEVICE_DISPLAY_OCCLUSION, 0xD5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(DOCKABLE_DEVICE_OBJECT_TYPE, 0xD6) \

#	define SRK_EXTENSION_HID_ENUM_HIDReportConsumerPageType \
			SRK_EXTENSION_HID_ENUM_ELEMENT(UNDEFINED, 0x0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(CONSUMER_CONTROL, 0x1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(NUMERIC_KEY_PAD, 0x2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(PROGRAMMABLE_BUTTONS, 0x3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(MICROPHONE, 0x4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(HEADPHONE, 0x5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(GRAPHIC_EQUALIZER, 0x6) \

#	define SRK_EXTENSION_HID_ENUM_HIDReportButtonPageType \
			SRK_EXTENSION_HID_ENUM_ELEMENT(NO_BUTTON_PRESED, 0x0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(BUTTON_1, 0x1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(BUTTON_65535, 0xFFFF) \

#	define SRK_EXTENSION_HID_ENUM_HIDReportCollectionData \
			SRK_EXTENSION_HID_ENUM_ELEMENT(PHYSICAL, 0x0) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(APPLICATION, 0x1) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(LOGICAL, 0x2) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(REPORT, 0x3) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(NAMED_ARRAY, 0x4) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(USAGE_MODIFIER, 0x5) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(USAGE_SWITCH, 0x6) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RESERVED_BEGIN, 0x07) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(RESERVED_END, 0x7F) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(VENDOR_DEFINED_BEGIN, 0x80) \
			SRK_EXTENSION_HID_ENUM_ELEMENT(VENDOR_DEFINED_END, 0xFF) \

#endif

namespace srk::extensions {
	class HIDDeviceInfo;
	class HIDDevice;


	enum class HIDReportItemType : uint8_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportItemType
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	enum class HIDReportMainItemTag : uint8_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportMainItemTag
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	enum class HIDReportGlobalItemTag : uint8_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportGlobalItemTag
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	enum class HIDReportLocalItemTag : uint8_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportLocalItemTag
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	enum class HIDReportUsagePageType : uint32_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportUsagePageType
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	enum class HIDReportGenericDesktopPageType : uint32_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportGenericDesktopPageType
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	enum class HIDReportConsumerPageType : uint32_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportConsumerPageType
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	enum class HIDReportButtonPageType : uint32_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportButtonPageType
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	enum class HIDReportCollectionData : uint16_t {
#define SRK_EXTENSION_HID_ENUM_ELEMENT(a, b) a = b,
		SRK_EXTENSION_HID_ENUM_HIDReportCollectionData
#undef SRK_EXTENSION_HID_ENUM_ELEMENT
	};


	/*
	enum class HIDReportType : uint8_t {
		INPUT,
		OUTPUT,
		FEATURE
	};


	template<typename T> concept HIDReportItemTag = SameAnyOf<T, HIDReportMainItemTag, HIDReportGlobalItemTag, HIDReportLocalItemTag>;


	class SRK_EXTENSION_DLL HIDReportScopeValues {
	public:
		using KeyType = uint32_t;
		using ValueType = uint32_t;

		inline bool SRK_CALL set(HIDReportGlobalItemTag tag, ValueType val) {
			return _set(_genKey(tag), val);
		}

		inline bool SRK_CALL set(HIDReportLocalItemTag tag, ValueType val) {
			return _set(_genKey(tag), val);
		}

		inline std::optional<ValueType> SRK_CALL get(HIDReportGlobalItemTag tag) const {
			return _get(_genKey(tag));
		}

		inline std::optional<ValueType> SRK_CALL get(HIDReportLocalItemTag tag) const {
			return _get(_genKey(tag));
		}

		void SRK_CALL clearLocal() {
			for (auto itr = _values.begin(); itr != _values.end();) {
				if (itr->first <= 255) {
					itr = _values.erase(itr);
				} else {
					++itr;
				}
			}
		}

	private:
		std::unordered_map<KeyType, ValueType> _values;

		inline static KeyType SRK_CALL _genKey(HIDReportGlobalItemTag tag) {
			return (KeyType)tag << 16 | 0xFF00;
		}

		inline static KeyType SRK_CALL _genKey(HIDReportLocalItemTag tag) {
			return (KeyType)tag;
		}

		inline std::optional<ValueType> SRK_CALL _get(KeyType key) const {
			auto itr = _values.find(key);
			return itr == _values.end() ? std::nullopt : std::optional(itr->second);
		}

		bool SRK_CALL _set(KeyType key, ValueType val) {
			auto itr = _values.find(key);
			if (itr == _values.end()) {
				_values.emplace(key, val);
				return true;
			} else if (itr->second != val) {
				itr->second = val;
				return true;
			}

			return false;
		}
	};
	*/


	using HIDUsagePage = uint16_t;
	using HIDUsage = uint16_t;


	struct SRK_EXTENSION_DLL HIDReportDescriptorItem {
		HIDReportItemType type;
		uint8_t size;
		uint16_t tag;

		static size_t SRK_CALL parse(const void* data, size_t length, HIDReportDescriptorItem& item) {
			if (!length) return 0;

			auto u8 = (const uint8_t*)data;
			auto val = u8[0];
			if (val == 0xFE) {
				if (length < 4) return 0;

				item.type = (HIDReportItemType)val;
				item.size = u8[1];
				item.tag = u8[3] << 8 | u8[2];

				return 3;
			} else {
				item.size = val & 0b11;
				if (item.size == 3) item.size = 4;
				item.type = (HIDReportItemType)(val >> 2 & 0b11);
				item.tag = val >> 4 & 0b1111;

				return 1;
			}
		}
	};


	class SRK_EXTENSION_DLL HID {
	public:
		static constexpr size_t IN_TIMEOUT_BLOCKING = (std::numeric_limits<size_t>::max)();
		static constexpr size_t OUT_ERROR = (std::numeric_limits<size_t>::max)();
		static constexpr size_t OUT_WAITTING = OUT_ERROR - 1;

		using EnumDevicesCallback = void(SRK_CALL*)(const HIDDeviceInfo& info, void* custom);

		static void SRK_CALL enumDevices(void* custom, EnumDevicesCallback);

		static bool SRK_CALL isValid(const HIDDeviceInfo& info);
		static bool SRK_CALL isValid(const HIDDevice& device);

		static uint16_t SRK_CALL getVendorID(const HIDDeviceInfo& info);
		static uint16_t SRK_CALL getProductID(const HIDDeviceInfo& info);
		static std::string_view SRK_CALL getManufacturerString(const HIDDeviceInfo& info);
		static std::string_view SRK_CALL getProductString(const HIDDeviceInfo& info);
		static std::string_view SRK_CALL getPath(const HIDDeviceInfo& info);
		static HIDUsagePage SRK_CALL getUsagePage(const HIDDeviceInfo& info);
		static HIDUsage SRK_CALL getUsage(const HIDDeviceInfo& info);

		//static ByteArray SRK_CALL getRawReportDescriptor(const HIDDeviceInfo& info);
		//static ByteArray SRK_CALL getRawReportDescriptor(const HIDDevice& device);

		static HIDDevice* SRK_CALL open(const std::string_view& path);
		static void SRK_CALL close(HIDDevice& device);

		static ByteArray SRK_CALL getRawReportDescriptor(const HIDDevice& device);
		static void* SRK_CALL getPreparsedData(const HIDDevice& device);

		static size_t SRK_CALL read(HIDDevice& device, void* data, size_t dataLength, size_t timeout);
		static size_t SRK_CALL write(HIDDevice& device, const void* data, size_t dataLength, size_t timeout);

		inline static bool SRK_CALL isSuccess(size_t rst) {
			return rst < OUT_WAITTING;
		}

		/*
		static size_t SRK_CALL parsePressedButtons(const HIDDevice& device, HIDReportType type, HIDUsagePage usagePage, const void* reportData, size_t reportDataLength, HIDUsage* outUsages, size_t usageLength);
		static std::optional<uint32_t> SRK_CALL parseValue(const HIDDevice& device, HIDReportType type, HIDUsagePage usagePage, HIDUsage usage, const void* reportData, size_t reportDataLength);

		template<HIDReportItemTag T>
		inline static uint8_t SRK_CALL generateReportShortItemHeader(T tag, uint8_t size) {
			HIDReportItemType type;
			uint8_t len = size > 2 ? 3 : size;
			if constexpr (std::same_as<T, HIDReportMainItemTag>) {
				type = HIDReportItemType::MAIN;
			} else if constexpr (std::same_as<T, HIDReportGlobalItemTag>) {
				type = HIDReportItemType::GLOBAL;
			} else {
				type = HIDReportItemType::LOCAL;

			}

			return generateReportShortItemHeader((uint8_t)type, (uint8_t)tag, len);
		}

		inline static uint8_t SRK_CALL generateReportShortItemHeader(HIDReportItemType type, uint8_t tag, uint8_t size) {
			return generateReportShortItemHeader((uint8_t)type, tag, size);
		}

		inline static uint8_t SRK_CALL generateReportShortItemHeader(uint8_t type, uint8_t tag, uint8_t size) {
			return tag << 4 | type << 2 | (size > 2 ? 3 : size);
		}
		*/
	};
}