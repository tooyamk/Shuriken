__set_project()

get_property(PROJECT_AE_CORE_NAME GLOBAL PROPERTY "PROJECT_AE_CORE_NAME")
get_property(PROJECT_AE_CORE_SRC_DIR GLOBAL PROPERTY "PROJECT_AE_CORE_SRC_DIR")
get_property(PROJECT_AE_CORE_DLL GLOBAL PROPERTY "PROJECT_AE_CORE_DLL")

get_property(PROJECT_AE_FRAMEWORK_NAME GLOBAL PROPERTY "PROJECT_AE_FRAMEWORK_NAME")
get_property(PROJECT_AE_FRAMEWORK_SRC_DIR GLOBAL PROPERTY "PROJECT_AE_FRAMEWORK_SRC_DIR")
get_property(PROJECT_AE_FRAMEWORK_DLL GLOBAL PROPERTY "PROJECT_AE_FRAMEWORK_DLL")

get_property(PROJECT_AE_ASTC_CONVERTER_NAME GLOBAL PROPERTY "PROJECT_AE_ASTC_CONVERTER_NAME")
get_property(PROJECT_AE_ASTC_CONVERTER_OUTPUT_NAME GLOBAL PROPERTY "PROJECT_AE_ASTC_CONVERTER_OUTPUT_NAME")
get_property(PROJECT_AE_ASTC_CONVERTER_DLL GLOBAL PROPERTY "PROJECT_AE_ASTC_CONVERTER_DLL")

get_property(PROJECT_AE_PNG_CONVERTER_NAME GLOBAL PROPERTY "PROJECT_AE_PNG_CONVERTER_NAME")
get_property(PROJECT_AE_PNG_CONVERTER_OUTPUT_NAME GLOBAL PROPERTY "PROJECT_AE_PNG_CONVERTER_OUTPUT_NAME")
get_property(PROJECT_AE_PNG_CONVERTER_DLL GLOBAL PROPERTY "PROJECT_AE_PNG_CONVERTER_DLL")

get_property(PROJECT_AE_FBX_CONVERTER_NAME GLOBAL PROPERTY "PROJECT_AE_FBX_CONVERTER_NAME")
get_property(PROJECT_AE_FBX_CONVERTER_OUTPUT_NAME GLOBAL PROPERTY "PROJECT_AE_FBX_CONVERTER_OUTPUT_NAME")
get_property(PROJECT_AE_FBX_CONVERTER_DLL GLOBAL PROPERTY "PROJECT_AE_FBX_CONVERTER_DLL")

get_property(PROJECT_AE_SHADER_SCRIPT_NAME GLOBAL PROPERTY "PROJECT_AE_SHADER_SCRIPT_NAME")
get_property(PROJECT_AE_SHADER_SCRIPT_OUTPUT_NAME GLOBAL PROPERTY "PROJECT_AE_SHADER_SCRIPT_OUTPUT_NAME")
get_property(PROJECT_AE_SHADER_SCRIPT_DLL GLOBAL PROPERTY "PROJECT_AE_SHADER_SCRIPT_DLL")

get_property(PROJECT_AE_PST_NAME GLOBAL PROPERTY "PROJECT_AE_PST_NAME")
get_property(PROJECT_AE_PST_DLL GLOBAL PROPERTY "PROJECT_AE_PST_DLL")

get_property(PROJECT_DX_SHADER_COMPILER_DLL GLOBAL PROPERTY "PROJECT_DX_SHADER_COMPILER_DLL")
get_property(PROJECT_GLEW_DLL GLOBAL PROPERTY "PROJECT_GLEW_DLL")
get_property(PROJECT_LIBPNG_DLL GLOBAL PROPERTY "PROJECT_LIBPNG_DLL")
get_property(PROJECT_ZLIB_DLL GLOBAL PROPERTY "PROJECT_ZLIB_DLL")

if (WIN32)
    get_property(PROJECT_AE_GRAPHICS_GL_NAME GLOBAL PROPERTY "PROJECT_AE_GRAPHICS_GL_NAME")
    get_property(PROJECT_AE_GRAPHICS_GL_DLL GLOBAL PROPERTY "PROJECT_AE_GRAPHICS_GL_DLL")

    get_property(PROJECT_AE_GRAPHICS_D3D11_NAME GLOBAL PROPERTY "PROJECT_AE_GRAPHICS_D3D11_NAME")
    get_property(PROJECT_AE_GRAPHICS_D3D11_DLL GLOBAL PROPERTY "PROJECT_AE_GRAPHICS_D3D11_DLL")

    get_property(PROJECT_AE_INPUT_DIRECT_INPUT_NAME GLOBAL PROPERTY "PROJECT_AE_INPUT_DIRECT_INPUT_NAME")
    get_property(PROJECT_AE_INPUT_DIRECT_INPUT_DLL GLOBAL PROPERTY "PROJECT_AE_INPUT_DIRECT_INPUT_DLL")

    get_property(PROJECT_AE_INPUT_RAW_INPUT_NAME GLOBAL PROPERTY "PROJECT_AE_INPUT_RAW_INPUT_NAME")
    get_property(PROJECT_AE_INPUT_RAW_INPUT_DLL GLOBAL PROPERTY "PROJECT_AE_INPUT_RAW_INPUT_DLL")

    get_property(PROJECT_AE_INPUT_XINPUT_NAME GLOBAL PROPERTY "PROJECT_AE_INPUT_XINPUT_NAME")
    get_property(PROJECT_AE_INPUT_XINPUT_DLL GLOBAL PROPERTY "PROJECT_AE_INPUT_XINPUT_DLL")
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    get_property(PROJECT_AE_GRAPHICS_GL_NAME GLOBAL PROPERTY "PROJECT_AE_GRAPHICS_GL_NAME")
    get_property(PROJECT_AE_GRAPHICS_GL_DLL GLOBAL PROPERTY "PROJECT_AE_GRAPHICS_GL_DLL")
endif ()

include_directories(
    ${PROJECT_AE_CORE_SRC_DIR}/src/
    ${PROJECT_AE_FRAMEWORK_SRC_DIR}/src/
    ${AE_SOURCE_DIR}/
)
add_definitions(${AE_DEFINITIONS})
file(GLOB_RECURSE SRC_FILES "src/*.h" "src/*.cpp")
__add_executable_source_group(${PROJECT_NAME} ${SRC_FILES})

set(linkLibs
    ${PROJECT_AE_CORE_NAME}
    ${PROJECT_AE_FRAMEWORK_NAME}
    ${PROJECT_AE_ASTC_CONVERTER_NAME}
    ${PROJECT_AE_PNG_CONVERTER_NAME}
    ${PROJECT_AE_FBX_CONVERTER_NAME}
    ${PROJECT_AE_SHADER_SCRIPT_NAME}
)

if (APPLE)
elseif (UNIX)
    list(APPEND linkLibs
        X11
        dl
        pthread
    )
endif ()

target_link_libraries(${PROJECT_NAME} ${linkLibs})
set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${PROJECT_NAME}${AE_BUILD_TYPE_SUFFIX})

if (WIN32)
    macro(__set_delayload)
        set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /DELAYLOAD:${ARGV0}${CMAKE_DEBUG_POSTFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /DELAYLOAD:${ARGV0}${CMAKE_RELEASE_POSTFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /DELAYLOAD:${ARGV0}${CMAKE_RELWITHDEBINFO_POSTFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}")
        set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} /DELAYLOAD:${ARGV0}${CMAKE_MINSIZEREL_POSTFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}")
    endmacro(__set_delayload)

    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS /SUBSYSTEM:WINDOWS)
    __set_delayload(${PROJECT_AE_ASTC_CONVERTER_OUTPUT_NAME})
    __set_delayload(${PROJECT_AE_PNG_CONVERTER_OUTPUT_NAME})
    __set_delayload(${PROJECT_AE_FBX_CONVERTER_OUTPUT_NAME})
    __set_delayload(${PROJECT_AE_SHADER_SCRIPT_OUTPUT_NAME})
endif ()

set(__OUTPUT_LIBS_DIR ${AE_BUILD_DIR}/libs)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_SOURCE_DIR}/../Resources/ ${AE_BUILD_DIR}Resources
)

set(test_pre_build_commands
    COMMAND ${CMAKE_COMMAND} -E make_directory ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_CORE_DLL} ${AE_BUILD_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_FRAMEWORK_DLL} ${AE_BUILD_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_ASTC_CONVERTER_DLL} ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_PNG_CONVERTER_DLL} ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_FBX_CONVERTER_DLL} ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_SHADER_SCRIPT_DLL} ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_DX_SHADER_COMPILER_DLL} ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_GLEW_DLL} ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_LIBPNG_DLL} ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_ZLIB_DLL} ${__OUTPUT_LIBS_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_PST_DLL} ${__OUTPUT_LIBS_DIR}
)
set(test_pre_build_depends
    ${PROJECT_AE_FRAMEWORK_NAME}
    ${PROJECT_AE_PNG_CONVERTER_NAME}
    ${PROJECT_AE_FBX_CONVERTER_NAME}
    ${PROJECT_AE_SHADER_SCRIPT_NAME}
    ${PROJECT_AE_PST_NAME}
)
if (WIN32)
    list(APPEND test_pre_build_commands
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_GRAPHICS_GL_DLL} ${__OUTPUT_LIBS_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_GRAPHICS_D3D11_DLL} ${__OUTPUT_LIBS_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_INPUT_DIRECT_INPUT_DLL} ${__OUTPUT_LIBS_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_INPUT_RAW_INPUT_DLL} ${__OUTPUT_LIBS_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_INPUT_XINPUT_DLL} ${__OUTPUT_LIBS_DIR}
    )
    list(APPEND test_pre_build_depends
        ${PROJECT_AE_GRAPHICS_GL_NAME}
        ${PROJECT_AE_GRAPHICS_D3D11_NAME}
        ${PROJECT_AE_INPUT_DIRECT_INPUT_NAME}
        ${PROJECT_AE_INPUT_RAW_INPUT_NAME}
        ${PROJECT_AE_INPUT_XINPUT_NAME}
    )
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    list(APPEND test_pre_build_commands
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_AE_GRAPHICS_GL_DLL} ${__OUTPUT_LIBS_DIR}
    )
    list(APPEND test_pre_build_depends
        ${PROJECT_AE_GRAPHICS_GL_NAME}
    )
endif ()

add_custom_target(test_pre_build ALL ${test_pre_build_commands})
add_dependencies(test_pre_build ${test_pre_build_depends})

add_dependencies(${PROJECT_NAME} test_pre_build)